version: 2.1
jobs:
  api_unit_test:
    docker:
      - image: circleci/node:12.13.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          name: Restoring Shared dependecies from cache
          key: shared-dependencies-{{ checksum "shared/package.json" }}

      - run:
          name: Installing Shared dependencies
          command: cd shared && npm install

      - save_cache:
          paths:
            - shared/node_modules
          key: shared-dependencies-{{ checksum "shared/package.json" }}

      - run:
          name: Running Shared linter
          command: cd shared && npm run lint

      - run:
          name: Running Shared unit tests
          command: cd shared && npm run test

      - store_artifacts:
          path: shared/coverage
          destination: shared/coverage

      - restore_cache:
          name: Restoring API dependencies from cache
          key: api-dependencies-{{ checksum "api/package.json" }}

      - run:
          name: Installing API dependencies
          command: cd api && npm install

      - save_cache:
          paths:
            - api/node_modules
          key: api-dependencies-{{ checksum "api/package.json" }}

      - run:
          name: Running API linter
          command: cd api && npm run lint

      - run:
          name: Running API unit tests
          command: cd api && npm run test

      - store_artifacts:
          path: api/coverage
          destination: api/coverage

      - run:
          name: Build API
          command: npm run build:api

      - persist_to_workspace:
          root: ~/
          paths:
            - repo/api/dist
  api_deploy:
    parameters:
      env:
        type: string
      cypress_password:
        type: string
      admin_user_email:
        type: string
    docker:
      - image: cibuilds/aws:1.16.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - deploy:
          name: AWS Package
          command: aws cloudformation package --template-file cf.foci2020.yaml --s3-bucket ${AWS_PACKAGES_S3} --output-template-file packaged.cf.foci2020.yaml
      - deploy:
          name: AWS Deploy
          command: aws cloudformation deploy --template-file packaged.cf.foci2020.yaml --stack-name foci2020-<<parameters.env>> --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND --parameter-overrides Env=<<parameters.env>> TestUserPassword=<<parameters.cypress_password>> AdminUserEmail=<<parameters.admin_user_email>>
      - run:
          name: Invoke Post deploy Lambda
          command: aws lambda invoke --function-name Foci2020-<<parameters.env>>-PostDeploy /dev/null
  test:
    parameters:
      env:
        type: string
    docker:
      - image: cypress/base
        environment:
          ENV: <<parameters.env>>
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          name: Restoring Shared dependecies from cache
          key: shared-dependencies-{{ checksum "shared/package.json" }}

      - run:
          name: Installing Shared dependencies
          command: cd shared && npm install

      - save_cache:
          paths:
            - shared/node_modules
          key: shared-dependencies-{{ checksum "shared/package.json" }}

      - restore_cache:
          name: Restoring test dependencies from cache
          key: test-dependencies-{{ checksum "test/package.json" }}

      - run:
          name: Installing test dependencies
          command: cd test && npm install

      - save_cache:
          paths:
            - test/node_modules
            - /root/.cache/Cypress
          key: test-dependencies-{{ checksum "test/package.json" }}

      - run:
          name: Running tests
          command: cd test && npm run test

      - store_artifacts:
          path: test/cypress/screenshots
          destination: test/cypress/screenshots
workflows:
  version: 2.1
  api:
    jobs:
      - api_unit_test
      - api_deploy:
          name: api_deploy_dev
          env: "DEV"
          cypress_password: ${CYPRESS_PASSWORD}
          admin_user_email: ${ADMIN_USER_EMAIL}
          requires:
            - api_unit_test
          filters:
            branches:
              only:
                - develop
      - api_deploy:
          name: api_deploy_uat
          env: "UAT"
          cypress_password: ${CYPRESS_PASSWORD}
          admin_user_email: ${ADMIN_USER_EMAIL}
          requires:
            - api_unit_test
          filters:
            branches:
              only:
                - release
      - api_deploy:
          name: api_deploy_prod
          env: "PROD"
          cypress_password: ""
          admin_user_email: ${ADMIN_USER_EMAIL}
          requires:
            - api_unit_test
          filters:
            branches:
              only:
                - master
      - test:
          name: test_dev
          env: "DEV"
          requires:
            - api_deploy_dev
          filters:
            branches:
              only:
                - develop
      - test:
          name: test_uat
          env: "UAT"
          requires:
            - api_deploy_uat
          filters:
            branches:
              only:
                - release
