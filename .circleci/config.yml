version: 2.1
jobs:
  unit_test:
    docker:
      - image: circleci/node:12.13.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          name: Restoring dependecies from cache
          key: dependencies-{{ checksum "package.json" }}

      - run:
          name: Installing dependencies
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "package.json" }}

      - restore_cache:
          name: Restoring dependecies from cache
          key: web-dependencies-{{ checksum "web/package.json" }}

      - run:
          name: Installing dependencies
          command: cd web && yarn install

      - save_cache:
          paths:
            - web/node_modules
          key: web-dependencies-{{ checksum "web/package.json" }}

      - run:
          name: Running API linter
          command: yarn run lint:api

      # - run:
      #     name: Running Web linter
      #     command: yarn run lint:web

      - run:
          name: Running API unit tests
          command: yarn run test:api

      # - run:
      #     name: Running Web unit tests
      #     command: yarn run test:web

      - store_artifacts:
          path: coverage
          destination: coverage

      - run:
          name: Build API
          command: yarn run build:api

      - run:
          name: Build Web
          command: yarn run build:web

      - persist_to_workspace:
          root: ~/
          paths:
            - repo/dist
  api_deploy:
    parameters:
      env:
        type: string
      cypress_password:
        type: string
      admin_user_email:
        type: string
    docker:
      - image: cibuilds/aws:1.16.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - deploy:
          name: AWS Package
          command: aws cloudformation package --template-file cf.foci2020.yaml --s3-bucket ${AWS_PACKAGES_S3} --output-template-file packaged.cf.foci2020.yaml
      - deploy:
          name: AWS Deploy
          command: aws cloudformation deploy --template-file packaged.cf.foci2020.yaml --stack-name foci2020-<<parameters.env>> --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM --parameter-overrides Env=<<parameters.env>> TestUserPassword=<<parameters.cypress_password>> AdminUserEmail=<<parameters.admin_user_email>>
      - run:
          name: Invoke Post deploy Lambda
          command: aws lambda invoke --function-name Foci2020-<<parameters.env>>-PostDeploy /dev/null
      - run:
          name: Get Database name
          command: echo "export CYPRESS_DYNAMO_TABLE=$(aws cloudformation describe-stacks --stack-name foci2020-<<parameters.env>> --query "Stacks[0].Outputs[?OutputKey=='Database'].OutputValue" --output text)" >> env
      - persist_to_workspace:
          root: ~/
          paths:
            - repo/env
  web_deploy:
    parameters:
      env:
        type: string
    docker:
      - image: cibuilds/aws:1.16.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - deploy:
          name: Web deploy
          command: aws s3 sync dist/web s3://$(aws cloudformation describe-stacks --stack-name foci2020-<<parameters.env>> --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucket'].OutputValue" --output text)
  test:
    parameters:
      env:
        type: string
    docker:
      - image: cypress/base
        environment:
          ENV: <<parameters.env>>
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          name: Restoring dependecies from cache
          key: dependencies-{{ checksum "package.json" }}

      - run:
          name: Installing dependencies
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "package.json" }}

      - restore_cache:
          name: Restoring test dependencies from cache
          key: test-dependencies-{{ checksum "test/package.json" }}

      - run:
          name: Installing test dependencies
          command: cd test && yarn install

      - save_cache:
          paths:
            - test/node_modules
            - /root/.cache/Cypress
          key: test-dependencies-{{ checksum "test/package.json" }}

      - run:
          name: Set environment variables
          command: cat env >> $BASH_ENV

      - run:
          name: Running tests
          command: cd test && yarn run test

      - store_artifacts:
          path: test/cypress/screenshots
          destination: test/cypress/screenshots
workflows:
  version: 2.1
  api:
    jobs:
      - unit_test
      - api_deploy:
          name: api_deploy_dev
          env: "DEV"
          cypress_password: ${CYPRESS_PASSWORD}
          admin_user_email: ${ADMIN_USER_EMAIL}
          requires:
            - unit_test
          filters:
            branches:
              only:
                - develop
      - web_deploy:
          name: web_deploy_dev
          env: "DEV"
          requires:
            - api_deploy_dev
          filters:
            branches:
              only:
                - develop
      - api_deploy:
          name: api_deploy_uat
          env: "UAT"
          cypress_password: ${CYPRESS_PASSWORD}
          admin_user_email: ${ADMIN_USER_EMAIL}
          requires:
            - unit_test
          filters:
            branches:
              only:
                - release
      - web_deploy:
          name: web_deploy_uat
          env: "UAT"
          requires:
            - api_deploy_uat
          filters:
            branches:
              only:
                - release
      - api_deploy:
          name: api_deploy_prod
          env: "PROD"
          cypress_password: ""
          admin_user_email: ${ADMIN_USER_EMAIL}
          requires:
            - unit_test
          filters:
            branches:
              only:
                - master
      - web_deploy:
          name: web_deploy_prod
          env: "PROD"
          requires:
            - api_deploy_prod
          filters:
            branches:
              only:
                - master
      - test:
          name: test_dev
          env: "DEV"
          requires:
            - web_deploy_dev
          filters:
            branches:
              only:
                - develop
      - test:
          name: test_uat
          env: "UAT"
          requires:
            - web_deploy_uat
          filters:
            branches:
              only:
                - release
