AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Foci 2020 Team Api'
Parameters: 
  LambdaRoleArn:
    Type: String
  Database:
    Type: String
  DeleteTeamTopic:
    Type: String
  TeamUpdatedTopic:
    Type: String
  Env:
    Type: String

Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
  Function:
    Handler: index.default
    Runtime: nodejs12.x
    Timeout: 10
    MemorySize: 512
    Tracing: Active  
    Environment:
      Variables:
        DYNAMO_TABLE: !Ref Database

Resources:
  TeamApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub Foci2020-${Env}-Team
      StageName: Prod
      TracingEnabled: true
      GatewayResponses:
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 404 
          ResponseTemplates:
            application/json: '{ "message": $context.error.messageString }'

  CreateTeam:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-CreateTeam
      CodeUri: ./dist/create-team
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /team/v1/teams
            Method: POST

  UpdateTeam:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-UpdateTeam
      CodeUri: ./dist/update-team
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /team/v1/teams/{teamId}
            Method: PUT    
      Environment:
        Variables:
          TEAM_UPDATED_TOPIC: !Ref TeamUpdatedTopic

  ListTeams:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-ListTeams
      CodeUri: ./dist/list-teams
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /team/v1/teams
            Method: GET                                    

  GetTeam:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-GetTeam
      CodeUri: ./dist/get-team
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /team/v1/teams/{teamId}
            Method: GET  

  DeleteTeam:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-DeleteTeam
      CodeUri: ./dist/delete-team
      Role: !Ref LambdaRoleArn
      Events:
        API:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /team/v1/teams/{teamId}
            Method: DELETE     
      Environment:
        Variables:
          DELETE_TEAM_TOPIC: !Ref DeleteTeamTopic                

  DeleteMatchWithTeam:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-DeleteMatchWithTeam
      CodeUri: ./dist/delete-match-with-team
      Role: !Ref LambdaRoleArn
      Events:
        SNS:
          Type: SNS
          Properties:
            Topic: !Ref DeleteTeamTopic    

Outputs:
  TeamApi:
    Description: "Foci 2020 Team API"
    Value: !Sub "${TeamApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"