AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  Env:
    Type: String
  TestUserPassword:
    Type: String
    Default: ""
  AdminUserEmail:
    Type: String

Conditions:
  ShouldCreateTestUsers: !Not [!Equals [!Ref TestUserPassword, ""]]

Globals:
  Function:
    Handler: index.default
    Runtime: nodejs12.x
    Timeout: 10
    MemorySize: 512
    Tracing: Active

Resources:
  Database:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: documentType-id
          AttributeType: S
        - AttributeName: documentType
          AttributeType: S
        - AttributeName: tournamentId
          AttributeType: S
        - AttributeName: homeTeamId
          AttributeType: S
        - AttributeName: awayTeamId
          AttributeType: S
        - AttributeName: matchId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: orderingValue
          AttributeType: S
      KeySchema:
        - AttributeName: documentType-id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: indexByTournamentId
          KeySchema:
            - AttributeName: tournamentId
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id
        - IndexName: indexByAwayTeamId
          KeySchema:
            - AttributeName: awayTeamId
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id
        - IndexName: indexByHomeTeamId
          KeySchema:
            - AttributeName: homeTeamId
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id
        - IndexName: indexByMatchId
          KeySchema:
            - AttributeName: matchId
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: indexByMatchId2
          KeySchema:
            - AttributeName: matchId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: indexByUserId
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: indexByDocumentType
          KeySchema:
            - AttributeName: documentType
              KeyType: HASH
            - AttributeName: orderingValue
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - sts:AssumeRole
          Principal:
            Service:
              - lambda.amazonaws.com
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - sns:Publish
                  - xray:*
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminSetUserPassword
                  - cloudformation:DescribeStacks
                  - lambda:InvokeFunction
                Resource: "*"

  TeamDeletedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub Foci2020-${Env}-TeamDeleted

  TournamentDeletedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub Foci2020-${Env}-TournamentDeleted

  TeamUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub Foci2020-${Env}-TeamUpdated

  TournamentUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub Foci2020-${Env}-TournamentUpdated

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          TemporaryPasswordValidityDays: 45
      Schema:
        - Name: nickname
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
      UserPoolName: !Sub Foci2020-${Env}
  ApplicationClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub Foci2020-${Env}-Application
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      ReadAttributes:
        - nickname
        - email
      UserPoolId: !Ref UserPool
      WriteAttributes:
        - nickname
        - email
  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: admin
  PlayerUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: player
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref UserPool
      Username: !Ref AdminUserEmail
      UserAttributes:
        - Name: email
          Value: !Ref AdminUserEmail
        - Name: nickname
          Value: Losi
  AdminUserToAdminGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser
    Properties:
      GroupName: admin
      UserPoolId: !Ref UserPool
      Username: !Ref AdminUserEmail
  AdminUserToPlayerGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser
    Properties:
      GroupName: player
      UserPoolId: !Ref UserPool
      Username: !Ref AdminUserEmail

  PostDeploy:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Foci2020-${Env}-PostDeploy
      CodeUri: ../api/dist/post-deploy
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          INFRASTRUCTURE_STACK: !Ref AWS::StackName

  CreateTestUsers:
    Type: AWS::Serverless::Function
    Condition: ShouldCreateTestUsers
    Properties:
      FunctionName: !Sub Foci2020-${Env}-CreateTestUsers
      CodeUri: ../api/dist/create-test-users
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          CLIENT_ID: !Ref ApplicationClient
          ADMIN_COUNT: 1
          PLAYER_COUNT: 3
          TEST_USER_PASSWORD: !Ref TestUserPassword

Outputs:
  Database:
    Value: !Ref Database
  LambdaRoleArn:
    Value: !GetAtt LambdaRole.Arn
  TeamDeletedTopic:
    Value: !Ref TeamDeletedTopic
  TournamentDeletedTopic:
    Value: !Ref TournamentDeletedTopic
  TeamUpdatedTopic:
    Value: !Ref TeamUpdatedTopic
  TournamentUpdatedTopic:
    Value: !Ref TournamentUpdatedTopic
  UserPoolId:
    Value: !Ref UserPool
  ClientId:
    Value: !Ref ApplicationClient
  UserPoolArn:
    Value: !GetAtt UserPool.Arn
  PostDeployCreateTestUsers:
    Value: !If [ShouldCreateTestUsers, !GetAtt CreateTestUsers.Arn, ""]
