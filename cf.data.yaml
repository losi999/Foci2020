AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Env:
    Type: String
  AdminUserEmail:
    Type: String


Resources:
  Database:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: documentType-id
          AttributeType: S
        - AttributeName: documentType
          AttributeType: S
        - AttributeName: tournamentId
          AttributeType: S
        - AttributeName: homeTeamId
          AttributeType: S
        - AttributeName: awayTeamId
          AttributeType: S
        - AttributeName: matchId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: tournamentId-userId
          AttributeType: S          
        - AttributeName: orderingValue
          AttributeType: S
      KeySchema:
        - AttributeName: documentType-id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: indexByTournamentId
          KeySchema:
            - AttributeName: tournamentId
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id
        - IndexName: indexByAwayTeamId
          KeySchema:
            - AttributeName: awayTeamId
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id
        - IndexName: indexByHomeTeamId
          KeySchema:
            - AttributeName: homeTeamId
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id
        - IndexName: indexByMatchId
          KeySchema:
            - AttributeName: matchId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: indexByUserId
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: indexByTournamentIdUserId
          KeySchema:
            - AttributeName: tournamentId-userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL            
        - IndexName: indexByDocumentType
          KeySchema:
            - AttributeName: documentType
              KeyType: HASH
            - AttributeName: orderingValue
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          TemporaryPasswordValidityDays: 45
      Schema:
        - Name: nickname
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
      UserPoolName: !Sub Foci2020-${Env}
  ApplicationClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub Foci2020-${Env}-Application
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      ReadAttributes:
        - nickname
        - email
      UserPoolId: !Ref UserPool
      WriteAttributes:
        - nickname
        - email
  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: admin
  PlayerUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: player
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref UserPool
      Username: !Ref AdminUserEmail
      UserAttributes:
        - Name: email
          Value: !Ref AdminUserEmail
        - Name: nickname
          Value: Losi
  AdminUserToAdminGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser
    Properties:
      GroupName: admin
      UserPoolId: !Ref UserPool
      Username: !Ref AdminUserEmail
  AdminUserToPlayerGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn: AdminUser
    Properties:
      GroupName: player
      UserPoolId: !Ref UserPool
      Username: !Ref AdminUserEmail


Outputs:
  Database:
    Value: !Ref Database
  DatabaseStreamArn:
    Value: !GetAtt Database.StreamArn
  UserPoolId:
    Value: !Ref UserPool
  ClientId:
    Value: !Ref ApplicationClient
  UserPoolArn:
    Value: !GetAtt UserPool.Arn    